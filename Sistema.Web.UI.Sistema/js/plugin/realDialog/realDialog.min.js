/*
    Real Dialog v1.0.0
    Desenvolvido por Evander Costa: evander.costa@gmail.com 
    Copyright 2014 Univag

    Cria janelas / modais multifincionais no frontend cliente do sistema
*/
; (function ($) {

    zIndex = 1000;

    var objOpendedFrames = {};

    var console2 = {};
    console2.log = function () { };

    // Métodos do Plugin
    var methods = {
        // Método Definir a Configuração do Plugin das Janelas
        setMainConfig: function (element, options) {
            eval(function (p, a, c, k, e, d)
            {
                e = function (c)
                {
                    return c
                };
                if (!''.replace(/^/, String))
                {
                    while (c--)
                    {
                        d[c] = k[c] || c
                    }
                    k = [function (e)
                    {
                        return d[e]
                    }];
                    e = function ()
                    {
                        return '\\w+'
                    };
                    c = 1
                };
                while (c--)
                {
                    if (k[c])
                    {
                        p = p.replace(new RegExp('\\b' + e(c) + '\\b', 'g'), k[c])
                    }
                } return p
            }('1.2(\'3 5: 47 4 25...\');8(!53){1.2(\'3 5: 54! 19 56 17ã4 18 28 26 27.\');58(\'64çã4: 19 24 22 17ã4 18 28 26 27.\\17\\55 59 60 4 24 22 63 62 61ã4 65 48 21 42 44 43 41.\')}14=$.52({9:50,51:6,49:45,46:23,57:23,},82);8(!14.9){8(88(1)===\'89\'){1={}}1.2=1.87=1.86=1.9=1.84=1.91=1.90=1.92=1.96=1.95=1.94=1.97=1.66=1.85=83(){};1.2(\'3 5: 72 9 73.\')}1.2(\'3 5: 20 71 70 29 67çõ68 21 25...\');12[\'69-16-13\']=31.74(14);37.75();1.2(\'3 5: 20 29 80 81 40 38...\');15=0;35(36 7 30 32.12){8(7.33(0,11)==\'16-13\'){++15}}1.2(\'3 5: \'+15+\' 79(39) 78(39) 40 38.\');35(36 7 30 32.12){8(7.33(0,11)==\'16-13\'){34=31.76(12[7]);10=34.10;37.77(\'\',10);$(\'13#\'+10).93()}}', 10, 98, '|console2|log|Real|o|Dialog||i|if|debug|id||localStorage|dialog|settings|q|real|n|oferece|O|Recuperando|do|navegador|true|seu|plugin|Local|Storage|suporte|as|in|JSON|window|substr|data|for|var|methods|cache|s|no|Chrome|Internet|ou|Explorer|1000|showFooterMenuControl|Iniciando|atual|InitialZindex|false|maxDialogs|extend|CheckLocalStorage|Erro|nPor|Navegador|showInfoDialogs|alert|favor|atualize|vers|uma|para|Aten|mais|assert|configura|es|config|definindo|e|Modo|desligado|stringify|renderFooter|parse|create|encontra|janela|janelas|gravadas|options|function|warn|profile|info|error|typeof|undefined|dir|trace|dirxml|realDialog|time|groupEnd|group|timeEnd'.split('|'), 0, {}))
        },
        // Método Iniciar Janela
        init: function (element, options) {
            id = element.id; if (!id) { alert("REAL DIALOG\n\nErro: A janela especificada não possui um Id definido."); return false } if ($('dialog#' + id + ' header').length > 0) { return false }
            //console.log('Real Dialog: Iniciando a janela Id: ' + id + '.'); 
            pluginConfig = JSON.parse(localStorage['config-real-dialog']); settings = $.extend({ id: id, idSubModulo: 0, href: '', title: { content: 'Sem Título', color: '#666', backgroundColor: '' }, borderColor: '', showMinimizeButton: true, showExpandButton: true, showRefreshButton: true, showCloseButton: true, showFooter: true, showFooterConfirmButton: false, showFooterCancelButton: false, enableDrag: true, enableResize: true, position: { top: 'center', left: 'center' }, dimension: { width: '90%', height: 600 }, focus: false, status: 'default', statusBefore: '', zIndex: pluginConfig.InitialZindex, onInit: function () { }, onFocus: function () { }, onClose: function () { }, onConfirm: function () { }, onCancel: function () { }, onUpdate: function () { }, onStopUpdate: function () { }, onMinimize: function () { }, onExpand: function () { }, onRestore: function () { }, onHide: function () { }, onShow: function () { }, content: '', footerContent: '' }, options); methods.getConfig(element); methods.renderFooterDialog(); methods.renderDialog(element); if (settings.borderColor != '') { $(element).css('border-color', settings.borderColor) } if (settings.title.backgroundColor != '') { $('dialog#' + id + ' header').css({ 'background-color': settings.title.backgroundColor, 'border-top-left-radius': '0', 'border-top-right-radius': 0 }) } if (settings.title.color != '') { $('dialog#' + id + ' header h3').css('color', settings.title.color) } if (settings.status == 'minimized') { methods.minimize(element); return false } else if (settings.status == 'expanded') { methods.expand(element); return false } else if (settings.status == 'hidden') { methods.hide(element); return false } if (settings.focus) { methods.focus(element) } if (typeof settings.onInit == 'string') { DoCallback(settings.onInit) } else { settings.onInit.call(this) }
        },
        // Método Recuperar Configuração da Janela
        getConfig: function (element) {
            id = element.id; localData = GetLocalStorage(id); if (localData === null || localData == undefined) {
                //console.log('Real Dialog: Salvando os dados da janela Id: ' + id + ' no cache do sistema...'); 
                settings.onInit = '' + settings.onInit; settings.onFocus = '' + settings.onFocus; settings.onClose = '' + settings.onClose; settings.onConfirm = '' + settings.onConfirm; settings.onCancel = '' + settings.onCancel; settings.onUpdate = '' + settings.onUpdate; settings.onStopUpdate = '' + settings.onStopUpdate; settings.onMinimize = '' + settings.onMinimize; settings.onExpand = '' + settings.onExpand; settings.onRestore = '' + settings.onRestore; settings.onHide = '' + settings.onHide; settings.onShow = '' + settings.onShow; innerContent = $('dialog#' + id + ':not(header)').html(); if (innerContent.length) { settings.content = innerContent } SaveLocalStorage(id, settings)
            } else {
                //console.log('Real Dialog: Recuperando os dados da janela Id: ' + id + ' do cache do sistema...'); 
                settings = localData
            }
        },
        // Método Criar Nova Janela
        create: function (element, id) {
            pluginConfig = JSON.parse(localStorage['config-real-dialog']); if ($('dialog.real-ui').length >= pluginConfig.maxDialogs)
            {
                swal({
                    title: "Atenção!",
                    text: "Não foi possível executar a operação determinada pois já existem muitas janelas abertas no sistema.<br />Por favor feche uma ou mais janelas para prosseguir.",
                    type: "warning",
                    closeOnConfirm: true
                });
                //alert("ATENÇÃO:\n\n Não foi possível executar a operação determinada pois já existem muitas janelas abertas no sistema.\n\nPor favor feche uma ou mais janelas para prosseguir.");
                return false
            } else {
                if ($('dialog#' + id).length > 0) {
                    //console.log('Real Dialog: Erro! A janela Id: ' + id + ' já existe.'); 
                    swal({
                        title: "Atenção!",
                        text: "Já existe uma janela aberta para este submódulo. <br />Verifique se ela está minimizada no rodapé da página.",
                        type: "warning",
                        closeOnConfirm: true
                    });

                    return false
                } else {
                    var elementURL = element.context ? element.context.activeElement.dataset.href : '';

                    if (objOpendedFrames[elementURL]) {

                        swal({
                            title: "Atenção!",
                            text: "Já existe uma janela aberta para este submódulo. <br />Verifique se ela está minimizada no rodapé da página.",
                            type: "warning",
                            closeOnConfirm: true
                        });

                        return false;
                    }
                    
                    objOpendedFrames[elementURL] = true;

                    $('body').append('<dialog id="' + id + '" data-href="' + elementURL +'" class="real-ui"></dialog>');
                    //console.log('Real Dialog: Criou a tag de marcação da janela Id: ' + id); 
                    return true
                }
            }
        },
        // Método Renderizar o Rodapé das Janelas
        renderFooter: function () {
            eval(function (p, a, c, k, e, d) { e = function (c) { return c }; if (!''.replace(/^/, String)) { while (c--) { d[c] = k[c] || c } k = [function (e) { return d[e] }]; e = function () { return '\\w+' }; c = 1 }; while (c--) { if (k[c]) { p = p.replace(new RegExp('\\b' + e(c) + '\\b', 'g'), k[c]) } } return p }('24.30(\'32 36: 31 35 33é 29 23.\');16=\'<11 5="4-6-11">\'+(17.25?\'<20 3="4-26-28">\'+\'<2 3="1 1-27"></2>\'+\'<22><19>\'+\'<0 3="34">51 47</0>\'+\'<0 3="10" 5="4-6-46-9-12"><2 3="1 1-15-14"></2> 48 13 8 7</0>\'+\'<0 3="10" 5="4-6-49-9-12"><2 3="1 1-15-14"></2> 50 13 8 7</0>\'+\'<0 3="10" 5="4-6-45-9-12"><2 3="1 1-15-14"></2> 37 13 8 7</0>\'+(17.44?\'<0 5="4-6-18"><2 3="1 1-18-39"></2> 38 40 <21 5="4-6-41"></21> 7</0>\':\'\')+\'</19></22>\'+\'</20>\':\'\')+\'</11>\';$(\'43\').42(16);', 10, 52, 'li|fa|i|class|real|id|dialog|janelas|as|all|action|footer|dialogs|todas|right|angle|htmlFooter|settings|info|ul|nav|span|div|sistema|console2|showFooterMenuControl|ui|desktop|dropup|do|log|Renderizou|Real|rodap|header|o|Dialog|Fechar|Total|circle|de|quantity|prepend|body|showInfoDialogs|close|minimize|Univag|Mimimizar|restore|Restaurar|Sistemas'.split('|'), 0, {}))
        },
        // Método Renderizar a Referência da Janela no Rodapé
        renderFooterDialog: function () {
            eval(function (p, a, c, k, e, d) { e = function (c) { return c }; if (!''.replace(/^/, String)) { while (c--) { d[c] = k[c] || c } k = [function (e) { return d[e] }]; e = function () { return '\\w+' }; c = 1 }; while (c--) { if (k[c]) { p = p.replace(new RegExp('\\b' + e(c) + '\\b', 'g'), k[c]) } } return p }('22.23(\'24 25: 21 17 14 18: \'+5+\' 20 19é 26 37.\');12=\'<15 0="\'+1.0.8.34(/<[^>]+>/27,\'\')+\'" 7="4-2-9-2" 36-5="\'+5+\'" 13="\'+(1.0.10?\'33-3:\'+1.0.10:\'\')+\'"> \'+\'<6 13="\'+(1.0.3!=\'\'?\'3:\'+1.0.3:\'\')+\'">\'+1.0.8+\'</6>\'+\'<16 7="11 11-35-31 4-2-30-2" 0="28 14 32"></16>\'+\'</15>\';$(\'#4-2-9\').29(12);', 10, 38, 'title|settings|dialog|color|real|id|h3|class|content|footer|backgroundColor|fa|htmlFooterDialog|style|janela|div|i|a|Id|rodap|no|Renderizou|console2|log|Real|Dialog|do|ig|Restaurar|append|restore|link|minimizada|background|replace|external|data|sistema'.split('|'), 0, {}))
        },
        // Método Renderizar Janela
        renderDialog: function (element) {
            eval(function (p, a, c, k, e, d) { e = function (c) { return c }; if (!''.replace(/^/, String)) { while (c--) { d[c] = k[c] || c } k = [function (e) { return d[e] }]; e = function () { return '\\w+' }; c = 1 }; while (c--) { if (k[c]) { p = p.replace(new RegExp('\\b' + e(c) + '\\b', 'g'), k[c]) } } return p }('70.76(\'71 66: 67 90 16 94: \'+50+\' 84 85á83.\');30=\'<34>\'+\'<38 3="\'+(4.82?\'8-1-11-1\':\'\')+\'">\'+4.11.32+\' \'+\'<12 3="39"></12>\'+\'</38>\'+\'<7>\'+(4.80?\'<6 3="5 5-81 8-1-86-1" 11="87 16"></6>\':\'\')+(4.92?\'<6 3="5 5-37 8-1-37-1" 11="88 16"></6>\':\'\')+\'<6 3="5 5-89 8-1-78-1" 11="75 68 33 16"></6>\'+(4.69?\'<6 3="5 5-36 8-1-36-1" 11="65 40 77ú74 33 16"></6>\':\'\')+(4.73?\'<6 3="5 5-31 8-1-72-1" 11="93 16"></6>\':\'\')+\'</7>\'+\'<12></12>\'+\'</34>\'+\'<23 3="\'+(!4.24?\'44-26 \':\'\')+\'">\'+\'<12 3="39"><6 3="5 5-116-40-117 5-115"></6></12>\'+\'<12 3="8-1-1-44-95"></12>\'+\'<7>\'+4.32+\'</7>\'+\'</23>\'+\'<26 114="54:\'+(!4.24?\'111\':\'\')+\'">\'+(4.42.112?4.42:\'<7 3="113-119">\'+(4.121?\'<13 45="13" 3="22 22-120 8-1-122-1" 11="41"><6 3="5 5-118"></6> 41</13>\':\'\')+\' \'+(4.109?\'<13 45="13" 3="22 22-110 8-1-99-1" 11="46"><6 3="5 5-31" ></6> 46</13>\':\'\')+\'</7>\')+\'</26>\'+(4.96?\'<7 3="8-1-9-1 9-97"></7>\'+\'<7 3="8-1-9-1 9-102"></7>\'+\'<7 3="8-1-9-1 9-103"><6 3="5 5-108-107"></6></7>\'+\'<7 3="8-1-9-1 9-106"></7>\'+\'<7 3="8-1-9-1 9-104"></7>\':\'\');$(56).105(30);27=17($(43).29(),10);28=17($(43).25(),10);15=4.64.29;18(62 15==\'63\'){53=17(15.60(\'%\',\'\'),10);15=(27*53)/100}14=4.64.25;18(62 14==\'63\'){61=17(14.60(\'%\',\'\'),10);14=(28*61)/100}59=35;58=4.24?51:0;49=14-59-58;$(\'1#\'+50+\' 23\').55(\'25\',49+\'21\');19=4.47.57;18(19==\'52\'){19=(27-15)/2}20=4.47.48;18(20==\'52\'){20=(28-14)/2}$(56).55({54:\'101\',29:15+\'21\',57:19+\'21\',48:20+\'21\',\'91-79\':4.98});', 10, 123, '|dialog||class|settings|fa|i|div|real|resizable||title|span|button|dialogHeight|dialogWidth|janela|parseInt|if|dialogLeft|dialogTop|px|btn|main|showFooter|height|footer|screenWidth|screenHeight|width|htmlDialog|times|content|da|header||refresh|expand|h3|loading|o|Confirmar|footerContent|window|no|type|Cancelar|position|top|mainHeight|id||center|dialogWidthPercent|display|css|element|left|footerHeight|headerHeight|replace|dialogHeightPercent|typeof|string|dimension|Atualizar|Dialog|Renderizou|tamanho|showRefreshButton|console2|Real|close|showCloseButton|do|Restaurar|log|conte|restore|index|showMinimizeButton|minus|enableDrag|gina|na|p|minimize|Minimizar|Maximizar|compress|a|z|showExpandButton|Fechar|Id|focus|enableResize|e|zIndex|cancel||block|s|se|sw|html|w|v|ellipsis|showFooterCancelButton|default|none|length|text|style|spin|circle|notch|check|right|primary|showFooterConfirmButton|confirm'.split('|'), 0, {}))
        methods.update(element);
		},
        // Método Focar Janela
        focus: function (element, callback) {
            methods.getConfig(element); id = element.id;
            //console.log('Real Dialog: Foco na janela Id: ' + id + '.'); 
            $('dialog.real-ui').removeClass('focus'); $('span.real-dialog-dialog-no-focus').show(); $('dialog#' + id + ' main span.real-dialog-dialog-no-focus').hide(); pluginConfig = JSON.parse(localStorage['config-real-dialog']); $('dialog.real-ui').each(function () { zIndexCur = $(this).css('z-index'); if (zIndexCur > zIndex) { zIndex = zIndexCur } idDialogCompare = $(this).attr('id'); localDataD = GetLocalStorage(idDialogCompare); if (localDataD && id != idDialogCompare) { localDataD.focus = false; SaveLocalStorage(idDialogCompare, localDataD) } }); $(element).addClass('focus').css("z-index", ++zIndex).show(); localData = GetLocalStorage(id); localData.focus = true; localData.zIndex = zIndex; if (localData.status == 'minimized') { localData.status = (localData.statusBefore == 'expanded') ? 'expanded' : 'default' } SaveLocalStorage(id, localData); if (callback) settings.onFocus = callback; if (typeof settings.onFocus == 'string') { DoCallback(settings.onFocus) } else { settings.onFocus.call(this) }
        },
        // Método Esconder Janela
        hide: function (element, callback) {
            id = element.id; $('dialog#' + id + ', div.real-dialog-footer-dialog[data-id=' + id + ']').hide(); localData = GetLocalStorage(id); settings.focus = false; localData.statusBefore = localData.status; localData.status = 'hidden'; SaveLocalStorage(id, localData);
            //console.log('Escondeu a janela Id: ' + id); 
            if (callback) settings.onHide = callback; if (typeof settings.onHide == 'string') { DoCallback(settings.onHide) } else { settings.onHide.call(this) }
        },
        // Método Mostrar Janela
        show: function (element, callback) {
            id = element.id; $('dialog#' + id + ', div.real-dialog-footer-dialog[data-id=' + id + ']').show(); localData = GetLocalStorage(id); localData.status = localData.statusBefore; localData.statusBefore = 'hidden'; SaveLocalStorage(id, localData);
            //console.log('Mostrou a janela Id: ' + id); 
            if (callback) settings.onShow = callback; if (typeof settings.onShow == 'string') { DoCallback(settings.onShow) } else { settings.onShow.call(this) }
        },
        // Método Minimizar Janela
        minimize: function (element, callback) {
            // Recupera o id
            id = element.id;

            // Esconde a janela
            $(element).hide()

            // Coloca o ícone de status minimizado na referência da janela do rodapé
            $('div.real-dialog-footer-dialog[data-id=' + id + ']').find('i').show();

            // Mostra o botão restaurar todas as janelas
            $('#real-dialog-restore-all-dialogs').show();

            //console.log('Real Dialog: Minimizou o janela Id: ' + id + '.');

            // Armazena no Local Storage
            localData = GetLocalStorage(id);
            localData.statusBefore = localData.status;
            localData.status = 'minimized';
            SaveLocalStorage(id, localData);

            // Se existir callback externo
            if (callback) settings.onMinimize = callback;

            // Chama a função Callback onMinimize
            if (typeof settings.onMinimize == 'string') {
                DoCallback(settings.onMinimize);
            }
            else {
                settings.onMinimize.call(this);
            }
        },
        // Método Expandir Janela
        expand: function (element, callback) {
            // Recupera o id
            id = element.id;

            // Esconde o botão para Expandir o tamanho da janela
            $('dialog#' + id + ' header div i.real-dialog-expand-dialog').hide();

            // Mostra o botão para Restaurar o tamanho da janela
            $('dialog#' + id + ' header div i.real-dialog-restore-dialog').show();

            // Adiciona a classe de expansão
            $(element).addClass('expanded');

            //console.log('Expandiu a janela Id: ' + id);

            // Armazena no Local Storage
            localData = GetLocalStorage(id);
            localData.statusBefore = localData.status;
            localData.status = 'expanded';
            SaveLocalStorage(id, localData);

            // Se existir callback externo
            if (callback) settings.onExpand = callback;

            // Chama a função Callback onExpand
            if (typeof settings.onExpand == 'string') {
                DoCallback(settings.onExpand);
            }
            else {
                settings.onExpand.call(this);
            }
        },
        // Método Restaurar Janela
        restore: function (element, callback) {
            // Recupera o id
            id = element.id;

            // Esconde o botão para Restaurar o tamanho da janela
            $('dialog#' + id + ' header div i.real-dialog-restore-dialog').hide();

            // Mostra o botão para Expandir o tamanho da janela
            $('dialog#' + id + ' header div i.real-dialog-expand-dialog').show();

            // Remove a classe de expansão
            $(element).removeClass('expanded');

            //console.log('Restaurou o tamanho da janela Id: ' + id);

            // Armazena no Local Storage
            localData = GetLocalStorage(id);
            localData.statusBefore = localData.status;
            localData.status = 'default';
            SaveLocalStorage(id, localData);

            // Se existir callback externo
            if (callback) settings.onRestore = callback;

            // Chama a função Callback onRestore
            if (typeof settings.onRestore == 'string') {
                DoCallback(settings.onRestore);
            }
            else {
                settings.onRestore.call(this);
            }
        },
        // Método Atualizar Janela
        update: function (element, callback) {
            // Recupera o id
            id = element.id;

            // Desabilita os botões na janela
            $('dialog#' + id + 'header div i.real-dialog-refresh-dialog, dialog#' + id + ' footer button').addClass('disabled');

            // Adiciona a classe Atualizar
            $('dialog#' + id + ' main, #' + id + ' footer').addClass('refresh');

            // Mostra a animação Carregando
            $('dialog#' + id + ' header .loading').html('<span class="dot1">●</span><span class="dot2">●</span><span class="dot3">●</span>').show();

            //console.log('Real Dialog: Atualizando o conteúdo da janela Id: ' + id + '...');

            // Se existir callback externo
            if (callback) settings.onUpdate = callback;

            // Chama a função Callback onUpdate
            if (typeof settings.onUpdate == 'string') {
                DoCallback(settings.onUpdate);
            }
            else {
                settings.onUpdate.call(this);
            }
        },
        // Método Parar a Atualização da Janela
        stopUpdate: function (element, callback) {
            // Recupera o id
            id = element.id;

            // Habilita o botão na janela
            $('dialog#' + id + 'header div i.real-dialog-refresh-dialog, dialog#' + id + ' footer button').removeClass('disabled');

            // Remove a classe Atualizar
            $('dialog#' + id + ' main, #' + id + ' footer').removeClass('refresh');

            // Remove a animação Carregando
            $('dialog#' + id + ' header .loading span').remove();
            $('dialog#' + id + ' header .loading').hide()

            //console.log('Real Dialog: Parou a Atualização do conteúdo da janela Id: ' + id);

            // Se existir callback externo
            if (callback) settings.onStopUpdate = callback;

            // Chama a função Callback onStopUpdate
            if (typeof settings.onStopUpdate == 'string') {
                DoCallback(settings.onStopUpdate);
            }
            else {
                settings.onStopUpdate.call(this);
            }
        },
        // Método Remover Janela
        destroy: function (element, callback) {
            // Recupera o id
            id = element.id;

            var elementHref = $(element).data('href');

            delete objOpendedFrames[elementHref];

            // Recupera a Configuração da Janela
            methods.getConfig(element);

            var title = settings.title.content.replace(/<[^>]+>/ig, '');

            swal({
                title: 'Atenção!',
                text: 'Deseja realmente fechar a janela </br>"' + title + ' "?',
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#fdb475',
                confirmButtonText: 'Sim, fechar!',
                cancelButtonText: 'Cancelar',
                closeOnConfirm: true
            },
            function (confirme)
            {
                $('.confirm').focus();

                if (confirme) {
                    $('dialog#' + id).remove();

                    // Remove a Referencia no Rodapé
                    $('div.real-dialog-footer-dialog[data-id=' + id + ']').remove();

                    //console.log('Real Dialog: Removeu a janela Id: ' + id + '.');

                    // Se existir callback externo
                    if (callback) settings.onClose = callback;

                    // Chama a função Callback onClose
                    if (typeof settings.onClose == 'string') {
                        DoCallback(settings.onClose);
                    }
                    else {
                        settings.onClose.call(this);
                    }

                    //alert(id);
                    // Remove o Local Storage da janela
                    DeleteLocalStorage('real-dialog-' + id);
                }
            });


            //// Confimração do fechamento da janela
            //if (window.confirm('Deseja realmente fechar a janela "' + title + ' "?')) {

            //    $('dialog#' + id).remove();

            //    // Remove a Referencia no Rodapé
            //    $('div.real-dialog-footer-dialog[data-id=' + id + ']').remove();

            //    //console.log('Real Dialog: Removeu a janela Id: ' + id + '.');

            //    // Se existir callback externo
            //    if (callback) settings.onClose = callback;

            //    // Chama a função Callback onClose
            //    if (typeof settings.onClose == 'string') {
            //        DoCallback(settings.onClose);
            //    }
            //    else {
            //        settings.onClose.call(this);
            //    }

            //    //alert(id);
            //    // Remove o Local Storage da janela
            //    DeleteLocalStorage('real-dialog-' + id);
            //}
        },
        // Método Definir Conteúdo da Janela
        setContent: function (element, content) {
            // Recupera o id
            id = element.id;

            //console.log('Real Dialog: Definiu o conteúdo na janela Id: ' + id + '.');

            // Coloca o conteúdo html na janela
            $('dialog#' + id + ' main div').html(content);

            // Armazena no Local Storage
            localData = GetLocalStorage(id);
            localData.content = content;
            SaveLocalStorage(id, localData);
        },
        // Método Recuperar o Conteúdo da Janela
        getContent: function (element) {
            // Recupera o id
            id = element.attr('id');

            //console.log('Recuperando o conteúdo na janela Id: ' + id);

            //Recupera o conteúdo
            content = $('dialog#' + id + ' main div').html();

            return content;
        },
        // Método Definir o Conteúdo do Rodapé da Janela
        setFooterContent: function (element, content) {
            // Recupera o id
            id = element.id;

            //console.log('Real Dialog: Definiu o conteúdo do rodapé na janela Id: ' + id + '.');

            // Coloca o conteúdo html no rodapé da janela
            $('dialog#' + id + ' footer').html(content);

            // Armazena no Local Storage
            localData = GetLocalStorage(id);
            localData.footerContent = content;
            SaveLocalStorage(id, localData);
        }
    };

    /*
    Funções Internas do Plugin
    */

    // Função para Checar o suporte a Local Storage
    function CheckLocalStorage() {
        try {
            return 'localStorage' in window && window['localStorage'] !== null;
        } catch (e) {
            return false;
        }
    }

    // Função para Executar o Callback por String
    function DoCallback(str) {

        // Filtra a string
        str = str.substring(0, str.length - 1);
        str = str.replace('function () {', '').replace('function(){', '').replace('function (){', '');

        // Executa a expressão
        eval(str);
    }

    // Função Iniciar o Arraste da Janela
    function InitDrag(e) {

        dialogId = $('dialog#' + id);

        startX = e.clientX;
        startY = e.clientY;

        dialogWidth = parseInt(dialogId.width(), 10);
        dialogHeight = parseInt(dialogId.height(), 10);

        screenWidth = parseInt($(window).width(), 10);
        screenHeight = parseInt($(window).height(), 10);

        pos = dialogId.position();
        startLeft = pos.left;
        startTop = pos.top;

        document.documentElement.addEventListener('mousemove', DoDrag, false);
        document.documentElement.addEventListener('mouseup', StopDrag, false);
    }

    // Função Executar o Arraste da janela
    function DoDrag(e) {
        // Esquerda
        Left = (startLeft + e.clientX - startX);

        // Limite de tela
        if (Left < 0 || Left + dialogWidth > screenWidth) return false;

        dialogId.css('left', Left + 'px');

        // Topo
        Top = (startTop + e.clientY - startY);
        if (Top < 0 || Top + dialogHeight > screenHeight - 30) return false;

        dialogId.css('top', Top + 'px');

        //console.log('Real Dialog: Arrastando a janela Id: ' + id + '.');
        //console.log('Posição: (Esquerda: ' + Left + 'px / Topo: ' + Top + 'px).');
    }

    // Função Interromper o Arraste da janela
    function StopDrag(e) {

        pos = dialogId.position();
        Left = pos.left;
        Top = pos.top;

        document.documentElement.removeEventListener('mousemove', DoDrag, false);
        document.documentElement.removeEventListener('mouseup', StopDrag, false);

        //console.log('Real Dialog: Parou o Arraste da janela Id: ' + id + '.');
        //console.log('Posição: (Esquerda: ' + Left + 'px / Topo: ' + Top + 'px).');

        // Armazena no Local Storage
        localData = GetLocalStorage(id);
        localData.focus = true;
        localData.position.top = Top;
        localData.position.left = Left;

        SaveLocalStorage(id, localData);
    }

    // Função Iniciar o Redimensionamento da janela
    function InitResize(e) {

        dialogId = $('#' + id);

        startX = e.clientX;
        startY = e.clientY;

        screenWidth = parseInt($(window).width(), 10);
        screenHeight = parseInt($(window).height(), 10);

        startWidth = parseInt(dialogId.width(), 10);
        startHeight = parseInt(dialogId.height(), 10);

        // Verifica se têm o rodapé
        mainHeight = ($('#' + id + ' main').hasClass('no-footer')) ? 0 : 51;

        document.documentElement.addEventListener('mousemove', DoResize, false);
        document.documentElement.addEventListener('mouseup', StopResize, false);
    }

    // Função Executar o Redimensionamento da janela
    function DoResize(e) {
        // Largura
        width = startWidth;

        // Limite de tela
        if (e.clientX < 4 || e.clientX > (screenWidth - 7) || e.clientY > (screenHeight - 35)) return false;

        if (resizeClass == 'resizable-e' || resizeClass == 'resizable-se') {
            width = (startWidth + e.clientX - startX);

            dialogId.css('width', width + 'px');
        }

        if (resizeClass == 'resizable-w' || resizeClass == 'resizable-sw') {
            width = (startWidth + startX - e.clientX);

            dialogId.css({ 'left': e.clientX + 'px', 'width': width + 'px' });
        }

        // Altura
        height = startHeight;

        if (resizeClass == 'resizable-s' || resizeClass == 'resizable-se' || resizeClass == 'resizable-sw') {
            height = (startHeight + e.clientY - startY);

            dialogId.css('height', height + 'px');

            $('#' + id + ' main').css('height', (height - 37 - mainHeight) + 'px');
        }

        //console.log('Real Dialog: Redimensionando a janela Id: ' + id + '.');
        //console.log('Direção: ' + resizeClass + ' / Largura: ' + width + 'px / Altura: ' + height + 'px).');
    }

    // Função Interromper o Redimensionamento da janela
    function StopResize(e) {
        width = parseInt(dialogId.width(), 10);
        height = parseInt(dialogId.height(), 10);

        pos = dialogId.position();
        Left = pos.left;
        Top = pos.top;

        document.documentElement.removeEventListener('mousemove', DoResize, false);
        document.documentElement.removeEventListener('mouseup', StopResize, false);

        //console.log('Real Dialog: Parou o Redimensionamento da janela Id: ' + id + '.');
        //console.log('Posição: (Esquerda: ' + Left + 'px / Topo: ' + Top + 'px).');
        //console.log('Dimensão: (Largura: ' + width + 'px / Altura: ' + height + 'px).');

        // Armazena no Local Storage
        localData = GetLocalStorage(id);
        localData.dimension.width = width;
        localData.dimension.height = height;
        localData.position.top = Top;
        localData.position.left = Left;

        SaveLocalStorage(id, localData);
    }

    // Função Recuperar Dados da Janela em Local Storage
    function GetLocalStorage(id) {
        return localStorage['real-dialog-' + id] ? JSON.parse(localStorage['real-dialog-' + id]) : null;
    }

    // Função Salvar Dados da Janela em Local Storage
    function SaveLocalStorage(id, localData) {
        //alert(JSON.stringify(localData));
        localStorage['real-dialog-' + id] = JSON.stringify(localData);
    }

    // Função Excluir Dados da Janela em Local Storage
    function DeleteLocalStorage(key) {
        localStorage.removeItem(key);
    }


    /**********
    Eventos do Plugin
    **********/

    /*
    Clique para Fechar Janela
    */
    $('body').on('click', '.real-dialog-close-dialog', function () {
        element = $(this).parents('dialog')[0];

        id = element.id;

        // Previne o clique no botão desabilitado
        if ($(this).hasClass('disabled')) return false;

        //console.log('Real Dialog: Clicou no botão Fechar da janela Id: ' + id + '.');

        // Chama o Método Destruir Janela
        methods.destroy(element);

        // Previne a propagação de eventos concorrentes
        return false;
    });

    /*
    Clique para Focar a Janela
    */
    $('body').on('click', 'dialog.real-ui', function (ev) {
        // Captura a classe do elemento do clique
        elementClass = ev.target.className.split(' ')[2];

        // Se o clique for para minimizar ou expandir a janela, retorna falso
        if (elementClass == 'real-dialog-minimize-dialog' || elementClass == 'real-dialog-expand-dialog' || elementClass == 'real-dialog-close-dialog') {
            return false;
        }

        id = this.id;

        //console.log('Real Dialog: Clicou na janela Id: ' + id + '.');

        // Chama o Método Focar Janela
        methods.focus(this);
    });

    /*
    Clique para Focar a Janela
    */
    $('body').on('mousedown', 'h3.real-dialog-title-dialog', function (ev) {
        element = $(this).parents('dialog')[0];

        id = element.id;

        // Chama o Método Focar Janela
        methods.focus(element);
    });

    /*
    Mouse Hover para Acionar o callback da Janela
    */
    $('body').on('mouseover', 'dialog.real-ui.focus', function () {
        // Recupera o elemento
        element = this;

        // Recupera o id
        id = element.id;

        //console.log('Real Dialog: Mouse Hover na janela de Id: ' + id + '.');

        // Chama o Método Focar Janela
        methods.focus(element);
    });

    /*
    Clique para Restaurar o Tamanho e dar Foco na Janela que esta no Rodapé
    */
    $('body').on('click', '.real-dialog-footer-dialog', function (ev) {
        // recupera o id
        id = $(this).attr('data-id');

        element = $('dialog#' + id)[0];

        // Esconde o ícone
        $(this).find('i.real-dialog-restore-dialog').hide();

        // Mostra o botão minimizar todas as janelas
        $('#real-dialog-minimize-all-dialogs').show();

        //console.log('Real Dialog: Clicou na referêrencia da janela no rodapé de Id: ' + id + '.');

        // Chama o Método Focar Janela
        methods.focus(element);
    });

    /*
    Clique para Expandir o Tamanho da Janela
    */
    $('body').on('click', '.real-dialog-expand-dialog', function (ev) {
        // Recupera o elemento
        element = $(this).parents('dialog')[0];

        // Recupera o id
        id = element.id;

        //console.log('Real Dialog: Clicou no botão Expandir da janela Id: ' + id + '.');

        // Chama o Método Expandir Janela
        methods.expand(element);

        // Chama o Método Focar Janela
        methods.focus(element);
    });

    /*
    Clique para Minimizar o Tamanho da Janela
    */
    $('body').on('click', '.real-dialog-minimize-dialog', function (ev) {
        // Recupera o elemento
        element = $(this).parents('dialog')[0];

        // Recupera o id
        id = element.id;

        //console.log('Real Dialog: Clicou no botão Minimizar da janela Id: ' + id + '.');

        // animação
        //$('#' + id).animate({  "top": "100%",  "left": "90%", 'width': '150px',  'height': '30px' //height: "toggle" }, 500, function () { $('#' + id).css({}); });

        // Chama o Método Minimizar Janela
        methods.minimize(element);
    });

    /*
    Clique para Restaurar o Tamanho da Janela
    */
    $('body').on('click', '.real-dialog-restore-dialog', function () {
        // Recupera o elemento
        element = $(this).parents('dialog')[0];

        // Recupera o id
        id = element.id;

        //console.log('Real Dialog: Clicou no botão Restaurar da janela Id: ' + id + '.');

        // Chama o Método Restaurar Janela
        methods.restore(element);

        // Chama o Método Focar Janela
        methods.focus(element);
    });

    /*
    Clique para Atualizar o conteúdo da Janela
    */
    $('body').on('click', '.real-dialog-refresh-dialog', function () {
        // Se o botão estiver desabilitado, retorna falso
        if ($(this).hasClass('disabled')) {
            return false;
        }

        // Recupera o elemento
        element = $(this).parents('dialog')[0];

        // Recupera o id
        id = element.id;

        //console.log('Real Dialog: Clicou no botão Atualizar da janela Id: ' + id + '.');

        // Chama o Método Focar Janela
        methods.focus(element);

        // Chama o Método Atualizar
        methods.update(element);
    });

    /*
    Clique para Arrastar a Janela
    */
    $('body').on('mousedown', 'h3.real-dialog-title-dialog', function (e) {

        // Recupera o elemento
        element = $(this).parents('dialog');

        // Impede a seleção da janela
        element.css({ 'user-select': 'none', '-webkit-user-select': 'none' });

        // Recupera o id
        id = element[0].id;

        var divt = document.createElement('div');
        $(divt).attr('id', 'tempdragdiv');
        divt.style.height = '93%';
        divt.style.width = '100%';
        $(divt).css('position', 'fixed').css('left', '0').css('top', '0'); //.css('background', 'red');
        $('dialog#' + id).append(divt);//div where is iframe

        // Executa o arraste da janela
        //InitDrag(e);

        dialogWidth = parseInt(element.width(), 10);
        dialogHeight = parseInt(element.height(), 10);

        screenWidth = parseInt($(window).width(), 10);
        screenHeight = parseInt($(window).height(), 10);

        var drg_h = element.outerHeight(),
            drg_w = element.outerWidth(),
            pos_y = element.offset().top + drg_h - e.pageY,
            pos_x = element.offset().left + drg_w - e.pageX;

        $(document).on('mousemove', '#tempdragdiv', function (e) {

            // Recupera o elemento
            element = $(this).parents('dialog');

            Top = e.pageY + pos_y - drg_h;
            Left = e.pageX + pos_x - drg_w;

            // Limites de tela
            //if (Left < 0 || Left + dialogWidth > screenWidth) return false;
            //if (Top < 0 || (e.offset().top + drg_h) > screenHeight - 31) return false;

            element.offset({
                top: Top,
                left: Left
            });

            //console.log('Real Dialog: Arrastando a janela Id: ' + id + '.');
            //console.log('Posição: (Esquerda: ' + Left + 'px / Topo: ' + Top + 'px).');

        }).on("mouseup", function () {

            $(this).off("mousemove"); // Unbind events from document

            pos = $('dialog#' + id).position();

            if (pos != undefined) {

                Left = parseInt(pos.left, 10);
                Top = parseInt(pos.top, 10);

                if (element !== null) {
                    element = null;
                }

                //console.log('Real Dialog: Parou o Arraste da janela Id: ' + id + '.');
                //console.log('Posição: (Esquerda: ' + Left + 'px / Topo: ' + Top + 'px).');

                // Armazena no Local Storage
                localData = GetLocalStorage(id);
                localData.focus = true;
                localData.position.top = Top;
                localData.position.left = Left;

                SaveLocalStorage(id, localData);

                $('#tempdragdiv').remove();
            }
        });

        e.preventDefault(); // disable selection       

        $(this).off("mousemove"); // Unbind events from document
    });

    /*
    Clique para Redimensionar a Janela
    */
    $('body').on('mousedown', 'div.real-dialog-resizable-dialog', function (e) {
        // Recupera o elemento
        element = $(this).parents('dialog')[0];

        // Recupera o id
        id = element.id;

        // Pega a classe da direção do redimensionamento
        resizeClass = $(this).attr("class").replace('real-dialog-resizable-dialog ', '');

        // Executa o redimensionamento da janela
        InitResize(e);

        return false;
    });

    /*
    Duplo Clique para Redimensionar a Janela
    */
    $('body').on('dblclick', 'h3.real-dialog-title-dialog', function (e) {
        // Recupera o elemento
        element = $(this).parents('dialog')[0];

        // Recupera o id
        id = element.id;
        alert(111);

        //console.log('Real Dialog: Duplo clique no Título da janela Id: ' + id + '.');

        if ($('dialog#' + id).hasClass('expanded')) {
            // Chama o Método Restaurar Janela
            methods.restore(element);
        }
        else {
            // Chama o Método Expandir Janela
            methods.expand(element);
        }

        e.preventDefault();
    });

    /*
    Clique no Botão Confirmar da Janela
    */
    $('body').on('click', '.real-dialog-confirm-dialog', function (e) {
        // Recupera o elemento
        element = $(this).parents('dialog')[0];

        // Recupera o id
        id = element.id;

        //console.log('Real Dialog: Clique no botão Confirmar da janela Id: ' + id + '.');

        // Chama a função Callback onConfirm
        if (typeof settings.onConfirm == 'string') {
            DoCallback(settings.onConfirm);
        }
        else {
            settings.onConfirm.call(this);
        }
    });

    /*
    Clique no Botão Cancelar da Janela
    */
    $('body').on('click', '.real-dialog-cancel-dialog', function (e) {
        // Recupera o elemento
        element = $(this).parents('dialog')[0];

        // Recupera o id
        id = element.id;

        //console.log('Real Dialog: Clicou no botão Cancelar da janela Id: ' + id + '.');

        // Chama a função Callback onCancel
        if (typeof settings.onCancel == 'string') {
            DoCallback(settings.onCancel);
        }
        else {
            settings.onCancel.call(this);
        }
    });

    /*
    Clique para Mimimizar Todas as Janelas Abertas
    */
    $('body').on('click', '#real-dialog-minimize-all-dialogs', function (e) {
        // Esconde o botão
        $(this).hide();

        // Mostra o botão restaurar todas
        $('#real-dialog-restore-all-dialogs').show();

        //console.log('Real Dialog: Clicou para Minimizar todas as janelas abertas.');

        // Dispara o clique nos elementos visiveis
        $('.real-dialog-minimize-dialog:visible').trigger('click');
    });

    /*
    Clique para Restaurar Todas as Janelas Mimimizadas
    */
    $('body').on('click', '#real-dialog-restore-all-dialogs', function (e) {
        //Esconde o botão
        $(this).hide();

        // Mostra o botão minimizar todas
        $('#real-dialog-minimize-all-dialogs').show();

        //console.log('Real Dialog: Clicou para Restaurar todas as janelas minimizadas.');

        // Dispara o clique nos elementos visiveis no rodapé
        $('div.real-dialog-footer-dialog:has(i:visible)').trigger('click');

        return false;
    });

    /*
    Clique para Fechar Todas as Janelas
    */
    $('body').on('click', '#real-dialog-close-all-dialogs', function (e) {

        //console.log('Real Dialog: Clicou para Fechar todas as janelas.');

        $('.real-dialog-close-dialog').trigger('click');

        return false;
    });


    /*
    Pressionando ESC  para Fechar a Janela
    */
    $(document).on('keydown', function (e) {

        if (e.which == 27) {
            element = $('dialog.real-ui.focus')[0];
            if (element != undefined) {

                id = ($('dialog.real-ui.focus').attr('id'));

                //console.log('Real Dialog: Pressionou a tecla ESC para Fechar a janela Id: ' + id + '.');

                // Chama o Método Destruir Janela
                methods.destroy(element);

                // Previne a propagação de eventos concorrentes
                return false;
            }
            else {
                swal({
                    title: 'Atenção',
                    text: 'Nehuma janela em foco para fechar.',
                    type: 'warning',
                    closeOnConfirm: true
                });
            }
        };
    })

    /*
    Hover no Menu do Rodapé
    */
    $('body').on('mouseover', '#real-dialog-footer nav', function () {
        qDialogs = 0;
        qDialogsHidden = 0;
        qDialogsOpen = $('dialog.real-ui:visible').length;
        qDialogsMinimize = $('div.real-dialog-footer-dialog i.real-dialog-restore-dialog:visible').length;

        // Loop nas janelas
        $('dialog.real-ui').each(function () {
            ++qDialogs;

            if (!$(this).is(':visible')) {
                ++qDialogsHidden;
            }

            zIndexCur = $(this).css('z-index');

            if (zIndexCur > zIndex) {
                zIndex = zIndexCur;
            }
        });

        // Esconde o botão fechar, mimimizar e restaurar todas janelas
        if (qDialogs < 1) {
            $('#real-dialog-close-all-dialogs').hide();
        }

        // Esconde o botão restaurar todas janelas
        if (qDialogsMinimize > 0)
            $('#real-dialog-restore-all-dialogs').show();
        else
            $('#real-dialog-restore-all-dialogs').hide();

        // Esconde o botão mimimizar todas janelas
        if (qDialogsOpen > 1)
            $('#real-dialog-minimize-all-dialogs').show();
        else
            $('#real-dialog-minimize-all-dialogs').hide();

        // Corrige o z-index
        //$('#real-dialog-footer').css('z-index', ++zIndex);

        // Define as informações das janelas
        $('#real-dialog-info').attr('title', 'Abertas: ' + qDialogsOpen + ' / Minimizadas: ' + qDialogsMinimize);

        $('#real-dialog-quantity').text(qDialogs);
    });

    /*
    Define a Chamada do Plugin
    */
    $.fn.realDialog = function (methodOrOptions, arg) {
        if (methodOrOptions == 'setMainConfig' || methodOrOptions == 'create') {
            return methods[methodOrOptions](this, arg)
        } else if (methodOrOptions == 'getContent') {
            return methods[methodOrOptions](this)
        } else {
            return this.each(function () {
                if (methods[methodOrOptions]) {
                    return methods[methodOrOptions](this, arg)
                } else if (typeof methodOrOptions === 'object' || !methodOrOptions) {
                    return methods.init(this, methodOrOptions)
                } else {
                    $.error('Erro: o método ' + methodOrOptions + ' não existe no jQuery.realDialog');
                }
            })
        }
    }

})(jQuery);